select 超时处理：
            select 监听time.After 中的channel的读事件，如果定时间到，系统会向该channel写入系统当前时间
            select{
            case <-time.After(time.Secound *5):

            }

死锁：不是一种锁， 是一种错误使用锁导致的现象
    1.单go程自己死锁： channel 应该至少两个go程中进行通信，否则会死锁。
    2.Go程中channel 访问顺序导致死锁 ：使用channel 一端读 ，要保证另一端写操作，同时又机会执行，否则会死锁。
    3.多Go程,多channel交叉死锁 ：Ago 程，掌握M同时，尝试拿N：Bgo程，掌握N的时候尝试拿M
    4.在Go语言中，尽量不要将互斥锁，读写锁与channel混用。-----隐形死锁



互斥锁：（互斥量）
    1.A，B共同访问共享数据，由于cpu调度随机，需要对共享数据访问顺序加一限定（同步）
    2.创建Mutex锁（互斥锁），访问共享数据之前，加锁访问结束，解锁。在Ago程加锁期间，Bgo程会加锁失败 ->阻塞  。 直到A go程解锁mutex , B从阻塞处，恢复执行。


读写锁：
     读时共享，写是独占。写锁优先级比读锁高

条件变量：
        本身不是锁，但是经常和锁结合使用
        使用流程：
        1.创建条件变量：var cond =sync.Cond
        2.指定条件变量用的锁:cond.L=new(sync.Mutex)
        3.cond.L.Lock 给公共区加锁（互斥锁）
        4.判断是否到达阻塞条件（缓冲区满/空） ---for 循环判断
            for len(ch) ==cap(ch){ cond.Wait()1.阻塞2.解锁3.加锁}
        5.访问公共区：读写打印
        6.解锁条件变量用的锁cond.L.Unlock()
        7.唤醒阻塞条件变量上的对端。



