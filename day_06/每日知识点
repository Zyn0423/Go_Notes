协议:一组规则，要求使用协议的双方，必须严格遵守协议的内容

网络分层架构:
           每一层利用下一层提供的服务来为上一层提供服务，本层服务的细节对上层屏蔽
           OSI七层模型结构：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层
           TCP/IP四层模型：链、网、传、应
各层的功能：
        链路层：ARP
               源mac  ---目标mac 地址
               ARP协议作用:借助IP获取MAC地址
        网络层：IP
               源IP -----目标IP
               IP协议作用：在网路中唯一标识一台主机。
               IP地址本质：2进制数 ---点分十进制IP地址（string）
        传输层：TCP/UDP
               port ----在一台主机上唯一标识一个进程
        应用层：FTP、http、自定义
               对数据封装和解封装。

数据通信过程：
      封装：应用层 ->  传输层 -> 网络层 -> 链路层   没有经过封装数据的，不能在网络环境中传递
     解封装：链路层 -> 网络层-> 传输层 -> 应用层

总结通信过程：
      1.mac地址：不需要用户指定 （ARP协议） IP ---->mac
      2.IP 地址：需要用户指定   ----确定主机
      3.PORT端口：需要用户指定  ---- 确认程序
                1.不能使用系统的默认端口：8080   通常：5000+
                2.65535为端口上线

socket：套接字
        网络通信过程中，socket一定是成对出现的。

网络应用设计模型：
            C/S : 优点：数据传输率高，协议选择灵活。            缺点：工作量大，安全性造成威胁
            B/S : 优点：开发工作量小，不受平台限制，安全性威胁小。缺点：缓冲数据差，选择协议不灵活

TCP-CS服务器：
            1.创建socket listen ,err :=net.Listen("tcp","ip+port")  -->服务器自己的ip
            2.对事件监听： conn,err:=listen.Accept()   conn用于通信的
            3.接收：conn.Read()
            4.处理数据使用数据[]byte
            5.发送：conn.write()
            6.关闭连接：listen、conn

TCP-CS客服端：
            1.创建socket conn,err :=net.Dial("tcp","ip+port)
            2.写数据给服务端: conn.write()
            3.接收服务端回发：conn.Read()
            4.关闭连接：conn.Close()

TCP-CS服务器并发版：
            1.创建socket listen,err :=net.Listen("tcp","ip+port")
            2.defer listen.Close()
            3.主程循环阻塞事件监听 :listen.Accept()
            4.创建go程对每一个客服端进行数据上的通信 go handlerconnet()
            5.go handlerconnet()
                1.defer conn.Close()
                2.查看那个客服端：addr:=conn.remoteAddr()
                3.for 循环接收数据：conn.Read(buf)    buf :=make([]byte,1024*4)
                4.处理数据：strings.ToUpper()
                5.回写数据：conn.write(buf[:n])


服务端判断关闭：
            1.Read读客服端/服务端 --0 对端关闭
            2.nc 命令发送数据时默认结尾自带"\n"


TCP:三次握手 ：C 发送SYN -> S 发送ACK -> C 发送 SYN 和ACK 给C
    四次挥手 ：C 发送FIN -> S 发送ACK ->半关闭状态等待S把数据发送完毕后 S发送FIN->C 发送 ACK 到 S