
web工作方式：

	1. 客户端 ——> 访问 www.baidu.com  ——> DNS 服务器。 返回 该域名对应的 IP地址。

	2. 客户端 ——> IP + port ——> 访问 网页数据。（TCP 连接。 HTTP协议。）

http和URL：

	http 超文本传输协议。规定了 浏览器访问 Web服务器 进行数据通信的规则。  http（明文） -- TLS、SSL -- https（加密）

	URL：统一资源定位。 在网络环境中唯一定位一个资源数据。  浏览器地址栏内容。

http请求包：

	请求行：请求方法（空格）请求文件URL（空格）协议版本（\r\n）

		GET、POST

	请求头：语法格式 ： key ：value

	空行：\r\n	 —— 代表 http请求头结束。

	请求包体：请求方法对应的数据内容。 GET方法没有内容！！

 

http应答包格式：

	状态行：协议版本号（空格）状态码（空格）状态码描述（\r\n）

	响应头：语法格式 ： key ：value

	空行：\r\n

	响应包体： 请求内容存在： 返回请求页面内容

		 请求内容不存在： 返回错误页面描述。

http WEB服务器：

	1.  注册回调函数：http.HandleFunc("/", myHandler)

		func myHandler(w http.ResponseWriter, r *http.Request)

			w：给客户端回发数据

			r：从客户端读到的数据

		type ResponseWriter interface {
   			Header() Header			
   			Write([]byte) (int, error)	
   			WriteHeader(int)			
		}

		type Request struct {
			Method string		// 浏览器请求方法 GET、POST⋯
			URL *url.URL		// 浏览器请求的访问路径
			⋯⋯
			Header Header		// 请求头部
			Body io.ReadCloser	// 请求包体
			RemoteAddr string	// 浏览器地址
			⋯⋯
    			ctx context.Context
		}

	2. 绑定服务器地址结构：http.ListenAndServe("127.0.0.1:8000", nil)

		参2：通常传 ni 。 表示  让服务端 调用默认的 http.DefaultServeMux 进行处理

http WEB客户端：

	1. 获取web服务器数据：

		func Get(url string) (resp *Response, err error)

		返回：http应答包，保存成 struct 

		type Response struct {
   			Status     string // e.g. "200 OK"
   			StatusCode int    // e.g.  200
   			Proto      string // e.g. "HTTP/1.0"
  			 ⋯⋯
   			Header Header
   			Body io.ReadCloser
  		 	⋯⋯
		}
	2. defer resp.Body.Close()

	3. for 循环提取 Body 数据：

		n, err := resp.Body.Read(buf) 
		if n == 0 {
			fmt.Println("--Read finish!")
			break
		}
		if err != nil && err != io.EOF {
			fmt.Println("resp.Body.Read err:", err)
			return
		}
