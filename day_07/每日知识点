查看状态命令：

	windows：netstat -an | findstr 8001（端口号）

	Linux： netstat -apn | grep 8001


TCP 通信：
        面向连接，可靠的数据包传输。
UDP 通信：
        面向无连接，不可靠的报文传递。

UDP：服务器：
           1.创建server端地址结构（IP+Adder） net.ResolveUDPAddr()
           2.创建用于通信的socket,绑定地址结构 upconnn :=net.ListUDP("udp","server adder结构")
           3.defer upconn.close()
           4.读取客服端发送的数据： upconn.ReadFromUDP()返回 n cltadder(客户端+IP) err 三个参数
           5.写数据给客服端：upconn.WriteToUDP([]byte,cltadder)

UDP :客户端：
          参考TCP客户端：net.Dial("udp","ip+port")


UDP 服务器并发:
           1.UDP默认支持客服端并发访问
           2.使用GO程将服务器处理 ReadFromUDP 和WriteToUDP 操作分开，提高效率并发

TCP和UDP比较：
            TCP：优点：安全、稳定、有序。            UDP：优点：效率高、开销小、开发复杂度低
                 缺点：效率低、开销大、开发复杂度高。      缺点：安全低、稳定差、无序

使用场景：
        TCP：对数据传输安全性、稳定性要求较高的场合。网络文件传输，上传、下载
        UDP：对数据实时传输要求性较高的场合，视屏直播，电话会议，游戏...

网络文件传输：

	命令行参数： 在main函数启动时，向整个程序传参。

		语法： go run xxx.go	  argv1 argv2  argv3  argv4

			xxx.go:  第 0 个参数。
			argv1 ：第 1 个参数。
			argv2 ：第 2个参数。
			argv3 ：第 3 个参数。
			argv4 ：第 4 个参数。

		使用： list := os.Args

		          参数3 = list[3]

	获取文件属性：

		fileInfo：os.stat(文件访问绝对路径)

		fileInfo 接口，两个接口。

			 Name() 获取文件名。

			 Size() 获取文件大小。

文件传输-发送端：
            1.提示用户使用命令行参数输入文件名，接收文件filepath(含访问路径)
            2.使用os.Stat(filepath).name() 获取文件属性，得到纯接文件名（去除访问路径）
            3.主动发起连接os.Dile()  结束时关闭
            4.发送文件名给接收端 conn.write()
            5.接收接收端回答的数据进行数据处理 conn.Read()
            6.判断处理的数据是否==Ok 如果是封装函数  发送文件内容 conn   fliepath
            7.只读open文件，结束时关闭close
            8.循环读该文件，读到结束时io.EOF ，读取完毕。
            9.将读到的类容原封不动的发送给接收端os.Write([]byte) 服务器


文件传输-接收端
            1.创建监听者：listen 程序结束后关闭
            2.阻塞等待客服端连接，程序结束时关闭 Conn
            3.读取客服端发来的数据 处理数据
            4.判断是否是文件名如果是回发给客服端 ok
            5.创建文件。 os.Create(fliename)  结束时关闭
            6.循环接收客服端发来的数据并写入到本地文件中os.Write(buf[:n])
            7.判断客服端发来的数据字节是否发送完毕，n==0 {完毕return}